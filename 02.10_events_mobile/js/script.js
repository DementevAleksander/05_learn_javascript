'use strict';
// 6 событий для мобильных браузеров.
// touchstart - событие возникает при косновении на элемент.
// touchmove - если палец касается элем. и начинает двигаться по нему,то при каждом смещ. пальца срабатывает touchmove.
// touchend - как только палец отпустил элемент срабатывает touchend.
// touchenter - ведём пальцем по экрану, и задевает элемент, на который назначено событие touchenter.
// touchleave - срабатывает когда палец ушёл за пределы элемента, на которое назначено событие touchleave.
// touchcansel - возникает тогда, когда точка соприкосновения больше не регистрируется на поверхнности.
// touchcansel - например, палец ушёл за пределы браузера.

window.addEventListener('DOMContentLoaded', () => {
    const box = document.querySelector('.box');
    box.addEventListener('touchstart', (e) => {
        e.preventDefault();
        console.log('Сработало событие touchstart!');
        console.log(e.touches);
    });

    box.addEventListener('touchmove', (e) => {
        e.preventDefault();
        //console.log('Сработало событие touchmove!');
        //отслеживаем движение touchmove.
        console.log(e.targetTouches[0].pageX);
        //обращаемся к порядковому номеру пальца, например первому, получаем координаты.
    });

    box.addEventListener('touchend', (e) => {
        e.preventDefault();
        console.log('Сработало событие touchend!');
    });
});

// 3 главных свойства при работе с сенсорными устройствами.
// touches - выдаёт список всех пальцев, которые взаимодействуют с экраном.
// targetTouches - выдаёт список всех пальцев, которые взаимодействуют с конкретным элеменом.
// changedTouches - список пальцев, участвующих в текущем событии. Например, если это событие touchend,
// то список будет содержать количество пальцев, которые были убраны, даже если пальцы убраны не все,
// то есть пальцы, совершившие действия.


//--------------------- Async, defer, динамические скрипты -----------------//
const p = document.querySelectorAll('p');
console.log(p);

//defer - атрибут
// Этот логический атрибут устанавливается для указания браузеру,
// что сценарий должен выполняться после анализа документа, но до его запуска DOMContentLoaded.
// Скрипты с deferатрибутом будут препятствовать запуску DOMContentLoadedсобытия,
// пока скрипт не загрузится и не завершит оценку.
// Другими словами, скрипт работает в фоновом режиме и запускается после загрузки структуры документа.
// 1. Скрипт с defer никогда не блкируют страницу.
// 2. Скрипт с defer выполняются когда структура DOM готова.
// Скрипты с defer ждут загрузки по порядку. То есть файл с маленьким скриптом не запутится,
// пока не отработает большой, если он стоит первым в очереди.
// Например, сначала подключаются библиотеки и только потом скрипты, которые используют эти библиотеки.
// Такие скрипты можно установить в <HEAD></HEAD>, но это не всегда актуально.

// async - атрибут
// 1. Страница не ждёт асинхронных скриптов. Содержимое обрабатывается и отображается.
// 2. Событие DOMContentLoaded и async не ждут друг друга. Как только доходит до скрипта, он сразу начинает выполняться.
// 3. Скрипты async не ждут другие скрипты и другие скрипты не ждут async. Они независимые.
// Данный атрибут интересен, например для скриптов с метриками и счётчиками,
// которым интересно, что пользователь зашёл на сайт.


function loadScript(src) {
    const script = document.createElement('script');
    script.src = src;
    script.async = false;
    document.body.append(script); 
}

loadScript("js/test.js");
loadScript("js/some.js");