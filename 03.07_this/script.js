'use strict';
// this - контекст вызова.
function showThis(a, b) {
      console.log(this);
      function sum() {
            console.log(this);
            return a + b;
      }
      console.log(sum());
}
showThis(4, 5);
// Вывод: Обычная функция this=window, но если стоит use strict, то будет undefined.

const obj = {
      a: 20,
      b: 15,
      sum: function () {
            console.log(this);
      }
};
obj.sum();
//Вывод: Контекст у методов объекта - сам объект.

const obj1 = {
      a: 20,
      b: 15,
      sum: function () {
            function shout() {
                  console.log(this);   
            }
            shout();
      }
};
obj1.sum();
// Вывод: undefined - простой вызов функции, он уже не относится к методу, это не метод объекта. Это функция, которая запускается внутри метода. Поэтому контекст вызова просто потерян. По сути ситуация аналогична первой ситуации.

function User(name, id) { //Для каждого конкретного пользователя будем указывать уникальные имя и номер. Это функция конструктор, когда она будет вызываться, то будет создавать объект.
      this.name = name; //Свойсва, которые обращаются к this.
      this.id = id;
      this.human = true; //все пользователи - люди.
      //такая функция стала конструктором. С её помощью можно создать новых пользователей.
      //кроме свойств можно записать методы.
      this.hello = function () {
            console.log(`Hello, ${this.name}`); //можно использовать свойства, которые находятся в этом же объекте.
      };
}
const ivan = new User('Ivan', 28); //new содаёт новый объект с теми свойствами, которые мы задали. This всегда ссылается на экземпляр new. Когда мы создаём новый объект, мы создаём новое свойство.
//Вывод: this в конструкторах и классах - это новый экземпляр объекта.

function sayName() {
      console.log(this);
      console.log(this.name);
}
const user = {
      name: 'John'
};
sayName.call(user);
sayName.apply(user);


//----------------------- Итог --------------------------//
// 1. Обычная функция this=window, но если стоит use strict, то будет undefined.
// 2. Контекст у методов объекта - сам объект.
// 3. this в конструкторах и классах - это новый экземпляр объекта.
// 4. Ручное присвоение this любой функции.
