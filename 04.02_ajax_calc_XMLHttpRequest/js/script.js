'use strict';
//AJAX - HTTP запрос к серверу и получение только необходимой информацию без перезагрузки страницы (асинхронно). Обновляем часть контента. Снижена нагрузка на сервер и экономия трафика.

//Разбираем первый вариант AJAX, который реализуется с помощью объекта XML HTTP Request. На данный момент немного устарел.
//Конвертор валют. Получаем курс валют от сервера по требованию.
const inputRub = document.querySelector('#rub'),
      inputUsd = document.querySelector('#usd');
    
inputRub.addEventListener('input', () =>{
    //Обращаемся к серверу, используя встренный в браузер XML HTTP Request.
    const request = new XMLHttpRequest(); //Создаём объект XMLHttpRequest(). У объекта есть свои методы и свойства. XMLHttpRequest это API, который предоставляет клиенту функциональность для обмена данными между клиентом и сервером. Данный API предоставляет простой способ получения данных по ссылке без перезагрузки страницы. Это позволяет обновлять только часть веб-страницы не прерывая пользователя.  XMLHttpRequest используется в AJAX запросах и особенно в single-page приложениях.

    //Методы объекта.
    request.open('GET', 'js/current.json'); //Собираем настройки, которые в будущем помогут сделать запрос. Document.open()Метод открывает документ для написания. Первый аргумент - метод, который используется для запроса (GET - получаем данные от сервера, POST - отправляем данные на сервер). Второй аргумент -  путь к серверу (url), путь необходимо указывать от index.html, так как там указана ссылка на файл JS, третий аргумент - отвечает за асинхронность (по умолчанию стоит true), четвёртый аргумент - логин, пятый аргумент - пароль.
    //Когда мы отправляем запрос, мы так же говорим, что именно мы отправляем (какая информация, в чём она закодирована и т.д.). Делается это для того, чтобы трансферные протоколы чётко понимали что они передают, а когда они приходят к серверу, сервер точно понимал, что они принимают в себя (json-файл или это какие-то изображения и т.д.). Для всего этого существуют заголовки HTTP.
    //Используем HTTP-заголовок для передачи HTTP-файла.
    request.setRequestHeader('Content-type', 'application/json; charset=utf-8'); //Указываем, что передаём контент и его тип + кодировка.
    //Отправляем запрос.
    request.send(); //Если request.open('POST'...);, то метод заполняется.

    //Свойства объекта XMLHttpRequest().
    //status - статус запроса. https://ru.wikipedia.org/wiki/%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA_%D0%BA%D0%BE%D0%B4%D0%BE%D0%B2_%D1%81%D0%BE%D1%81%D1%82%D0%BE%D1%8F%D0%BD%D0%B8%D1%8F_HTTP
    // statusText - текстовое описание ответа от сервера.
    // response - ответ от сервера. Здесь лежит ответ, который задал BackEnd разработчик.
    // readyState - текущее состояние нашего запроса. https://developer.mozilla.org/ru/docs/Web/API/XMLHttpRequest/readyState

    //События объекта XMLHttpRequest().
    // request.addEventListener('readystatechange', () => { //Отслеживает статус готовности нашего запроса в данный текукщий момент.
    //     if (request.readyState === 4 && request.status === 200) { //4	DONE	Операция полностью завершена и 200 OK («хорошо»).
    //         //Используем ответ от сервера.
    //         console.log(request.response);
    //         const data = JSON.parse(request.response);
    //         inputUsd.value = (+inputRub.value / data.current.usd).toFixed(2); //.toFixed(2) - Округляем до 2х знаков после запятой.
    //     } else {
    //         inputUsd.value = "Если сайт не работает позвоните по номеру +7 (985) 777-77-77!";
    //     }
    // });
    // событие load - срабатывает когда запрос полностью загрузился и мы получили результат. Используется чаще всего. Оно проще, так как срабатывает только один раз, когда запрос полностью готов.
    request.addEventListener('load', () => { //Отслеживает статус готовности нашего запроса в данный текукщий момент.
        if (request.status === 200) { //4	DONE	Операция полностью завершена и 200 OK («хорошо»).
            //Используем ответ от сервера.
            console.log(request.response);
            const data = JSON.parse(request.response);
            inputUsd.value = (+inputRub.value / data.current.usd).toFixed(2); //.toFixed(2) - Округляем до 2х знаков после запятой.
        } else {
            inputUsd.value = "Если сайт не работает позвоните по номеру +7 (985) 777-77-77!";
        }
    });
});
